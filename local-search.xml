<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>西方哲学史·张志伟</title>
    <link href="/2021/01/28/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E5%8F%B2%C2%B7%E5%BC%A0%E5%BF%97%E4%BC%9F/"/>
    <url>/2021/01/28/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E5%8F%B2%C2%B7%E5%BC%A0%E5%BF%97%E4%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-智慧的痛苦"><a href="#1-智慧的痛苦" class="headerlink" title="1 智慧的痛苦"></a>1 智慧的痛苦</h2><blockquote><p><strong>西方哲学史分期：</strong></p><ol><li><p>公元前6世纪到公元6世纪，<strong>古代哲学</strong></p></li><li><p>公元2世纪到16世纪，<strong>中古哲学</strong></p></li><li><p>17世纪到19世纪，<strong>近代哲学</strong></p></li><li><p>20世纪，<strong>现代西方哲学</strong></p></li></ol></blockquote><h3 id="1-1-什么是哲学"><a href="#1-1-什么是哲学" class="headerlink" title="1.1 什么是哲学"></a>1.1 什么是哲学</h3><blockquote><p>不做加法做减法→排除什么不是哲学</p></blockquote><ul><li><p><strong>关于哲学的一些错误看法</strong></p><ol><li><p>哲学是科学：哲学<strong>不具备</strong>一门科学知识应该具备的最基本特征：<strong>普遍性和必然性</strong>。<strong>哲学不是自然科学式的科学</strong>（自然科学是工具手段，哲学思考工具如何使用、价值取向是什么）</p></li><li><p>哲学是使人聪明的学问：哲学思想众说纷纭，糊涂是入门的开始。</p></li><li><p>哲学是讲道理的学问：<strong>哲学往往被看作是为意识形态服务的工具。</strong></p><ul><li>科学知识的对象→现实性→可以经过经验、事实、实验的验证</li><li>哲学的对象→理想性→不同的时代、社会、文化背景等等使人们对理想世界的理解不同→而<strong>哲学探究的是逻辑，是论证方式</strong>，它可以是无懈可击的→具体到个体上大前提可能是有问题的→看似不讲道理</li></ul></li><li><p>哲学无用：哲学应该是人的精神家园</p><blockquote><p>所有学科都比哲学有用，但是唯有哲学是自由的学问。因为所有的学科都有前提，都有它服务的对象，但唯独哲学是为了自身而被追求的知识。——亚里士多德</p></blockquote><p>人文学科与自然科学学科→工具理性和价值理性的平衡问题→科技社会的异化问题</p></li></ol></li><li><p><strong>哲学是什么？philosophia(哲学)=philos+sophia(爱智慧)</strong></p><p>只要那个问题是有可能解决的，它就不再是哲学问题，它就会成为一门学科，而留给哲学的就是无法解决的问题。</p><ul><li>科学：研究自然，诉诸于理性。</li><li>宗教：关注超自然世界，诉诸于信仰，面对终极关怀（例如人从何而来归于何处，宇宙的本性是什么）的问题。</li><li>哲学：和科学一样讲理性，和宗教一样起源于终极关怀的问题。</li></ul><blockquote><p>哲学问题具有这样的形式：我找不到出路所在。——维特根斯坦</p></blockquote></li><li><p><strong>问题与难题</strong>：</p><ul><li>问题：有标准答案的问题，称之为”问题“。</li><li>难题：没有标准答案，只有不同解决方式的问题，称之为”难题“。</li></ul><p>我们面对的大多数问题其实是难题。哲学家面对的是一切难题中的难题。</p><p>为什么非要追问哲学问题？↓</p></li></ul><h3 id="1-2-智慧的痛苦"><a href="#1-2-智慧的痛苦" class="headerlink" title="1.2 智慧的痛苦"></a>1.2 智慧的痛苦</h3><blockquote><p>整个人类发端以来，所有的问题最终归结起来无非是生死的问题。</p></blockquote><ul><li> <strong>矛盾</strong>：有限/无限、相对/绝对、暂时/永恒</li></ul><h3 id="1-3-问题与对话"><a href="#1-3-问题与对话" class="headerlink" title="1.3 问题与对话"></a>1.3 问题与对话</h3><h3 id="1-4-西方哲学精神"><a href="#1-4-西方哲学精神" class="headerlink" title="1.4 西方哲学精神"></a>1.4 西方哲学精神</h3><h2 id="2-哲学的诞生"><a href="#2-哲学的诞生" class="headerlink" title="2 哲学的诞生"></a>2 哲学的诞生</h2>]]></content>
    
    
    <categories>
      
      <category>社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西哲史</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础</title>
    <link href="/2021/01/28/HTML%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/01/28/HTML%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1-文档声明-标题标签-文本格式化标签-盒子标签-图像-超链接-表格-列表"><a href="#1-文档声明-标题标签-文本格式化标签-盒子标签-图像-超链接-表格-列表" class="headerlink" title="1 文档声明 标题标签 文本格式化标签 盒子标签 图像 超链接 表格 列表"></a>1 文档声明 标题标签 文本格式化标签 盒子标签 图像 超链接 表格 列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--文档类型声明（告诉浏览器使用哪种HTML版本显示网页）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--语言类型lang，中文为zh-CN--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--字符集，一定要声明否则会出现乱码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>StudyHTML_1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>共有六级标签h1~h6<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个内嵌了换行标签<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>的段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>可以看到段落与段落之间有较大空隙，而换行则没<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>文本格式化标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    这是<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>第一种加粗<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>第二种加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>的文字<br>    <span class="hljs-comment">&lt;!--推荐使用strong标签，语义更强烈--&gt;</span><br>    这是<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>第一种斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>第二种斜体<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>的文字<br>    <span class="hljs-comment">&lt;!--推荐使用em标签，语义更强烈--&gt;</span><br>    这是<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>第一种删除线<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>第二种删除线<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>的文字<br>    <span class="hljs-comment">&lt;!--推荐使用del标签，语义更强烈--&gt;</span><br>    这是<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>第一种下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>第二种下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>的文字<br>    <span class="hljs-comment">&lt;!--推荐使用ins标签，语义更强烈--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>div和span标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--div和span标签：是没有语义的，就是个盒子，用来装内容的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签用来布局，一行只能放一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>展示一行只能放一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签也是用来布局的，但一行可以放多个span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>像这样<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>可以放多个<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>图像标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--src：图像源路径（必须要写）；alt：替换文字，图片加载不出来时替换；title：提示文本，鼠标放在图片的时候显示；width和height用于修改宽度和高度--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/img1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片加载错误&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;桌面壁纸&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--src中还可以填写绝对路径（例如url等）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.visualstudio.com/assets/images/home-intellisense.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>超链接标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--href表示跳转目标，target表示目标窗口的弹出格式（默认为_self即在当前窗口打开，_blank表示在新窗口打开）--&gt;</span><br>    <span class="hljs-comment">&lt;!--外部链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--内部链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;link.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>访问内部链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--空连接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>访问空链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--下载链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;docs/download.zip&quot;</span>&gt;</span>下载文件（目标地址为文件）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--网页元素连接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--锚点链接：可以快速定位到当前页面的某个位置。必须要用&quot;#名字&quot;的形式，在目标跳转处添加id=&quot;名字&quot;属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#text&quot;</span>&gt;</span>跳转到文本格式化标签<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>返回顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>特殊字符<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>空格<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>是这样的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>更多的特殊字符请见<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.cnblogs.com/mengmengi/p/10137167.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>默认表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表格属性最好用CSS，这里只做演示--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;表&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">1</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;表头&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第一列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第二列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第三列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;行&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>表格结构标签（适用于表格结构较大的情况）<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">1</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第一列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第二列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>第三列<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>这是单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>列表标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--无序列表--&gt;</span><br>    <span class="hljs-comment">&lt;!--ul标签里只能放li标签，而li标签里可以放任意元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--有序列表 了解--&gt;</span><br>    <span class="hljs-comment">&lt;!--ol标签里只能放li标签，而li标签里可以放任意元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自定义列表--&gt;</span><br>    <span class="hljs-comment">&lt;!--dl标签里只能放dt和dd标签，而dd标签里可以放任意元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>了解小米<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>加入小米<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>联系小米<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-表单"><a href="#2-表单" class="headerlink" title="2 表单"></a>2 表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>StudyHTML_2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>表单<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表单域form--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;test.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--action属性表示用于接收并处理表单数据的服务器程序的URL地址--&gt;</span><br>        <span class="hljs-comment">&lt;!--method属性表示表单数据的提交方式，GET/POST--&gt;</span><br>        <span class="hljs-comment">&lt;!--name属性表示指定表单的名称，以区分同一页面中的多个表单域--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--表单控件--&gt;</span><br>    <span class="hljs-comment">&lt;!--input：输入表单元素--&gt;</span><br>    <span class="hljs-comment">&lt;!--name定义input元素的名称，value定义input元素的值，checked属性表示默认选中，maxlength属性规定用户输入字符的最大长度--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;test.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--test文本框--&gt;</span><br>        Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Please input your username&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--password密码框--&gt;</span><br>        Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--radio单选按钮 每个单选按钮的name相同时才可实现多选一--&gt;</span><br>        Sex: Male<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- label标签用于实现点击提示文字也能够选中按钮或文本框（注意label的for和input的id必须相同） --&gt;</span><br>        Married: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;married&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;married&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>Yes<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>&lt;input<br>            type=&quot;radio&quot; name=&quot;married&quot; value=&quot;unmarried&quot; id=&quot;no&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>No<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--checkbox多选按钮--&gt;</span><br>        Book: ABC<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> CDE<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--submit提交按钮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--reset重置按钮，清除表单中的所有数据--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- button普通按钮，多通过JS启动脚本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取短信验证码&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- file文件按钮，用于上传文件 --&gt;</span><br>        上传图像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- select下拉表单元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;test.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Beijing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Tianjin<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Chongqing<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Shanghai<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- textarea文本域元素 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- cols规定每行显示的最大字符数，rows规定最大行数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>这里创建了一个文本域<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社会心理学笔记</title>
    <link href="/2021/01/28/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/28/%E7%A4%BE%E4%BC%9A%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-社会心理学导论"><a href="#1-社会心理学导论" class="headerlink" title="1 社会心理学导论"></a>1 社会心理学导论</h2><h3 id="1-1-社会心理学的概念"><a href="#1-1-社会心理学的概念" class="headerlink" title="1.1 社会心理学的概念"></a>1.1 社会心理学的概念</h3><p>社会心理学是一门研究我们周围情景影响力的科学，尤其关注我们如何看待他人，如何影响他人。更确切的说：<strong>社会心理学是一门研究人们如何看待他人，如何互相影响，以及如何与他人互相关联的科学。</strong></p><blockquote><p>待更新，刚开始看=v=</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>社会心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记</title>
    <link href="/2021/01/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h2><ul><li><p><strong>JDK</strong>:Java Development Kit</p><p><strong>JRE</strong>:Java Runtime Environment</p><p>二者关系：</p><p><img src="../../images/note/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1586607504639.png" alt="1586607504639"></p></li></ul><ul><li><p>一个Java源码只能定义一个<code>public</code>类型的class，并且class名称和文件名要完全一致； </p></li><li><p>使用<code>javac</code>可以将<code>.java</code>源码编译成<code>.class</code>字节码；</p><p>使用<code>java</code>可以运行一个已编译的Java程序，参数是类名。</p></li><li><p><code>public</code>是访问修饰符，表示该<code>class</code>是公开的。不写<code>public</code>，也能正确编译，但是这个类将无法从命令行执行。</p></li><li><p>在菜单栏中点击【Code】&gt;【Reformat Code】或者快捷键【Ctrl】+【Alt】+【L】可以用来格式化代码。</p></li><li><p>Java基本数据类型占用的字节数：  <code>byte</code>恰好就是一个字节，而<code>long</code>和<code>double</code>需要8个字节。 </p><p><img src="../../images/note/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1586609454308.png" alt="1586609454308"></p></li><li><p>在Java中，变量分为两种：基本类型的变量和引用类型的变量。  引用类型最常用的就是<code>String</code>字符串。 引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置 。</p></li><li><p>整数由于存在范围限制，如果计算结果超出了范围，就会产生溢出，而溢出<em>不会出错</em>，却会得到一个奇怪的结果（ 由于最高位计算结果为<code>1</code>，因此，加法结果变成了一个负数）</p></li><li><p>注意<code>++</code>写在前面和后面计算结果是不同的，<code>++n</code>表示先加1再引用n，<code>n++</code>表示先引用n再加1。 </p></li><li><p><strong>Java强制类型转换</strong>：强制转型使用<code>(类型)</code>，例如，将<code>int</code>强制转型为<code>short</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">12345</span>;<br><span class="hljs-keyword">short</span> s = (<span class="hljs-keyword">short</span>) i; <span class="hljs-comment">// 12345</span><br></code></pre></td></tr></table></figure><p>要注意，超出范围的强制转型会得到错误的结果，原因是转型时，<code>int</code>的两个高位字节直接被扔掉，仅保留了低位的两个字节：</p></li><li><p><strong>浮点数常常无法精确表示</strong>： 例如浮点数<code>0.1</code>在计算机中就无法精确表示，因为十进制的<code>0.1</code>换算成二进制是一个无限循环小数，很显然，无论使用<code>float</code>还是<code>double</code>，都只能存储一个<code>0.1</code>的近似值。但是，<code>0.5</code>这个浮点数又可以精确地表示。 因此，浮点数的运算会产生误差。</p></li><li><p>由于浮点数存在运算误差，所以比较两个浮点数是否相等常常会出现错误的结果。正确的比较方法是判断两个浮点数之差的绝对值是否小于一个很小的数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 比较x和y是否相等，先计算其差的绝对值:</span><br><span class="hljs-keyword">double</span> r = Math.abs(x - y);<br><span class="hljs-comment">// 再判断绝对值是否足够小:</span><br><span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0.00001</span>) &#123;<br>    <span class="hljs-comment">// 可以认为相等</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 不相等</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：在一个复杂的四则运算中，两个整数的运算不会出现自动提升的情况。例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">double</span> d = <span class="hljs-number">1</span>.<span class="hljs-number">2</span> + <span class="hljs-number">24</span> / <span class="hljs-number">5</span>; // <span class="hljs-number">5</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>计算结果为<code>5.2</code>，原因是编译器计算<code>24 / 5</code>这个子表达式时，按两个整数进行运算，结果仍为整数<code>4</code>。</p></li><li><p>可以将浮点数强制转型为整数。在转型时，浮点数的小数部分会被丢掉。如果转型后超过了整型能表示的最大范围，将返回整型的最大值。  如果要进行四舍五入，可以对浮点数加上0.5再强制转型。</p></li></ul><h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><ul><li><p><strong>面向对象的思想</strong>：实际是分类的思想</p></li><li><p><strong>面向对象编程OOP的本质：以类的方式组织代码，以对象的形式封装数据</strong></p></li><li><p><strong>面向对象的三大特性：封装、继承、多态</strong></p><ul><li><p><strong>封装：</strong>即追求<strong>”高内聚，低耦合“</strong>。高内聚就是类的内部操作细节自己完成，不允许外部干涉。低耦合即仅暴露少量的方法给外部使用。</p><blockquote><p>属性私有</p><p>get/set</p></blockquote></li><li><p><strong>继承(is-a)：</strong>本质是对一批类的抽象，从而实现对现实世界更好的建模。子类是对父类的拓展，继承了父类全部的方法。所有的类都默认直接或间接继承Object类。</p><blockquote><p>Java中只有单继承，没有多继承（一个子类不能有多个父类）</p></blockquote></li></ul></li><li><p><strong>static(静态)**：意指优先于对象存在（和类一起加载的），被所有对象所共享，即属于类而不属于任何对象。而非静态方法在类实例化之后才存在（</strong>静态方法不可调用非静态方法**）</p><blockquote><p>静态方法可以直接通过类名调用 e.g. Student.say(); //Student是类</p></blockquote><p>**final(常量)**：意指不可改变。</p></li><li><p><strong>隐式参数</strong>：出现在方法名前的对象 ，即方法调用的目标或接收者 **Employee.**raiseSalary(5)</p><p><strong>显式参数</strong>：方法名后面括号里的数值  Employee.raiseSalary(<strong>5</strong>)</p></li><li><p>一个类可以使用所属包中的所有类，以及其他包中的公有类。</p></li><li><p><strong>值传递和引用传递</strong></p></li><li><p><strong>构造器：一旦定义了有参构造，就必须显式定义无参构造（若会使用到无参构造的话）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">this</span>.name = <span class="hljs-keyword">null</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>类设计技巧</strong>：</p><ol><li>一定要保证数据私有：不能破坏封装性</li><li>一定要对数据初始化</li><li>不要在类中使用过多的基本类型：用其他的类代替多个相关的基本类型的使用</li><li>不是所有的域都需要独立域访问器和域更改器</li><li>将职责过多的类进行分解</li><li>类名和方法名要能体现他们的职责</li><li>优先使用不可变的对象</li></ol></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>子类方法不能直接访问超类的私有域，只有超类的方法才能访问其私有部分。</li><li><strong>this</strong>：1. 引用隐式参数 2. 调用该类的其他构造器</li><li><strong>super</strong>：1.调用超类的方法 2. 调用超类的构造器</li><li><strong>方法的签名</strong>：方法的名字和参数列表。如果在子类中定义了一个与超类签名相同的方法，那么子类中这个方法就会覆盖超类中相同签名的方法。</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件安全重点</title>
    <link href="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E9%87%8D%E7%82%B9/"/>
    <url>/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="软件安全概念"><a href="#软件安全概念" class="headerlink" title="软件安全概念"></a>软件安全概念</h1><h3 id="字符串安全"><a href="#字符串安全" class="headerlink" title="字符串安全"></a>字符串安全</h3><ul><li><p><strong>缓冲区溢出</strong>：当向为某特定数据结构分配的内存空间边界之外写入数据时， 就会发生缓冲区溢出。</p></li><li><p><strong>常见的字符串操作错误：</strong></p><ol><li><p>无界字符串复制</p></li><li><p>空结尾错误</p></li><li><p>截断</p></li><li><p>差一错误</p></li><li><p>数组写入越界</p></li><li><p>不恰当的数据处理</p></li></ol></li><li><p><strong>程序栈中存储的内容包括：</strong>调用函数的返回地址；函数参数；局部 (临时）变量</p></li><li><p><strong>下列情况栈被修改</strong>：在函数调用期间；函数初始化期间；从子例程返回时</p></li><li><p><strong>栈粉碎</strong>：当缓冲区溢出覆写分配给执行栈内存中的数据时，就会导致栈粉碎</p></li><li><p><strong>恶意参数的特征</strong>：必须被漏洞程序作为合法输入接受；参数,以及其他可控输入必定导致了漏洞代码路径的执行；在控制权转移到恶意代码之前，参数不能导致程序非正常终止。</p></li><li><p><strong>弧注入</strong>：弧注入将控制转移到已经存在于程序内存空间中的代码中。弧注入的利用方式是在程序的控制流“团”中插入一段新的“弧’（表示控制流转移），而不是进行代码注入。</p></li><li><p><strong>动态分配缓冲区的缺点</strong>：如果输入被限制，则可能耗尽机器内存，结果导致拒绝服务攻击。</p></li></ul><h3 id="指针安全"><a href="#指针安全" class="headerlink" title="指针安全"></a>指针安全</h3><ul><li><p><strong>缓冲区溢出覆写指针的条件</strong>：</p><ol><li><p>缓冲区与目标指针必须分配在同一个段内</p></li><li><p>对于由上界控制的循环，缓冲区必须位于比目标指针更低的内存地址处</p></li><li><p>该缓冲区必须是界限不充分的，因此容易被缓冲区溢出利用</p></li></ol></li><li><p><strong>data段</strong>： 包含了所有已初始化的全局变量和常数</p><p><strong>bss段</strong>：   包含了所有未初始化的全局变量  </p></li><li><p><strong>全局偏移表GOT</strong>：被包含在ELF的二进制文件的进程空间里，存放绝对地址，使得动态链接的进程能够工作。在ELF可执行文件中的GOT入口项的地址是固定的。</p></li><li><p><strong>虚函数</strong>：虚函数使用virtual关键字声明的类成员函数，可以由派生类的同名函数重写，函数调用在运行时解析。</p></li><li><p><strong>Windows提供了三种形式的异常处理程序：</strong></p><ol><li>向量化异常处理 Vectored Exception Handling (VEH)：nVEH首先调用以重写SEH</li></ol></li></ul><ol start="2"><li>结构化异常处理 Structured Exception Handling (SEH)，被实现为每函数或每线程的异常处理程序，即每一个函数或每一个线程都有自己的异常处理程序。</li><li>系统默认异常处理 System Default Exception Handling：是一个全局异常过滤器和处理器，用于处理整个进程的异常情况。</li></ol><h3 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h3><ul><li><p><strong>常见的内存管理错误</strong>:</p><ol><li><p>初始化错误 </p></li><li><p>未检查返回值 </p></li><li><p>引用已释放内存</p></li><li><p>对同一块内存释放多次 </p></li><li><p>不正确配对的内存管理函数</p></li><li><p>未能区分标量和数组</p></li><li><p>分配函数使用不当</p></li></ol></li><li><p><strong>筐</strong>:空闲块被组织成环形双链表称为筐,  每个筐容纳有特定大小或一定大小范围的空闲块,  还有一个包含最近释放的块的筐作为缓存</p></li><li><p><strong>unlink代码片段(内存块被分配/被合并)：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> unlink(P, BK, FD) &#123;\</span><br>FD = P-&gt;fd;\ <br>BK = P-&gt;bk;\ <br>FD-&gt;bk = BK;\ <br>BK-&gt;fd = FD;\ <br>&#125; <br></code></pre></td></tr></table></figure><p><strong>frontlink代码片段(内存块被释放)：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">BK = bin;<br>FD = BK-&gt;fd;<br><span class="hljs-keyword">if</span> (FD != BK) &#123;<br>       <span class="hljs-keyword">while</span> (FD != BK &amp;&amp; S &lt; chunksize(FD)) &#123;<br>           FD = FD-&gt;fd;<br>     &#125;<br>     BK = FD-&gt;bk;<br>&#125;<br>P-&gt;bk = BK;<br>P-&gt;fd = FD;<br>FD-&gt;bk = BK-&gt;fd = P<br></code></pre></td></tr></table></figure></li><li><p>**成功地利用双重释放漏洞，有两个条件必须满足 **:</p><p>被释放的内存块必须在内存中独立存在</p><p>该内存所被放入的筐（bin）必须为空</p></li><li><p><strong>空闲链表</strong>: 即被RTLHeap用来跟踪空闲内存块LIST_ENTRY结构的数组FreeList[]，包含128个元素，每个LIST_ENTRY元素表示一个双链表的头部，每个链表管理特定大小的空闲块。</p><blockquote><p>包含128个元素的数组，数组中的每个元素指向一个双链表，称之为FreeList[]，被RTLHeap用来跟踪空闲内存块。FreeList[]是一个LIST_ENTRY结构的数组，每个LIST_ENTRY表示一个双链表的头部，每个链表管理特定大小的空闲块。</p></blockquote></li><li><p><img src="../../images/note/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%A6%82%E5%BF%B5/1609340258808.png" alt="1609340258808"></p></li><li><p><strong>进程环境块TEB</strong>：RTLHeap数据结构的相关信息被存储在进程环境块中，维护有每一个进程的全局变量  。存放堆的最大数量、堆的实际数量、默认堆的位置、一个指向包含所有堆位置的数组的指针。</p></li><li><p><strong>后备缓存链表</strong>：在堆分配时创建 ，用于加速对小块内存的分配操作，会先于空闲链表被检查。</p></li></ul><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><ul><li><p>当用以下格式字符串调用格式化输出函数时，就会触发<strong>无效指针存取或未映射的地址读取</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s%s%s%s%s%s%s%s%s%s%s&quot;</span>);<br></code></pre></td></tr></table></figure><p>转换指示符%s显示<strong>执行栈上相应参数所指定的地址的内存</strong>。</p><blockquote><p>由于在这个例子中没有提供字符串参数，因此printf()可以读取栈中任意内存位置，直到格式字符串耗尽或者遇到一个无效指针或未映射地址为止。</p></blockquote></li><li><p><strong>栈随机化</strong>:通过向栈中插入随机的间隙实现的, 使得很难预测栈上信息的位置，包括返回地址和自动变量的位置.</p></li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li><p><strong>并发</strong>：一种系统属性，是指系统中几个计算同时执行，并可能彼此交互。  </p></li><li><p><strong>并行与并发</strong>：并发和并行不等价，所有的并行程序都是并发的，但不是所有的并发程序都是并行的。这意味着并发程序既可以用交错、时间分片的方式执行又可以并行执行。  </p><p>另：并行包括数据并行和任务并行 。数据并行把问题分解成数据段，且并行应用一个函数 。 任务并行性指将一个问题分解成可以共享数据的不同任务。各任务在同一时间执行，但执行不同的功能。</p></li><li><p><strong>并行度</strong>：表示工作(所有指令花费的总时间)跨度(执行最长的并行执行路径或关键路径所花费的时间)比。  </p></li><li><p><strong>竞争条件</strong>：在任何情况下，取决于哪个线程首先完成，只要两个线程可以产生不同的行为，都会产生竞争条件。</p><blockquote><p>竞争条件指多个线程或者进程在读写一个共享数据时结果依赖于它们执行的相对时间的情形。</p><p>只有当两个或多个线程共享数据而且至少一个线程试图对数据进行修改时，才可能有竞争条件。   </p></blockquote></li><li><p><strong>竞争条件存在的三个属性</strong>：</p><ol><li>并发属性：至少有两个必须同时执行的控制流。</li><li>共享对象属性：两个并发流都必须访问一个共享的竞争对象。</li><li>改变状态属性：至少有一个控制流一定会改变竞争对象的状态。  </li></ol></li><li><p>同步：</p></li><li><p><strong>并发代码属性</strong>：</p><ol><li><strong>线程安全：一个线程安全函数通过锁或其他互斥机制来防止共享资源被并发访问。</strong>因此，一个线程安全的函数可以同时被多个线程调用，而不用担心。</li><li><strong>可重入：指相同函数的多个实例可以同时运行在相同的地址空间中，而不会创建潜在的不一致的状态。</strong> 在连续调用时不持有静态数据，也不会返回一个指向静态数据的指针。因此，可重入函数使用的所有数据都由调用者提供，并且可重入函数不能调用不可重入函数。  </li><li>线程安全与可重入：<strong>可重入函数一定也是线程安全的，但线程安全的函数却可能无法重入</strong>。  </li></ol></li><li><p><strong>死锁</strong>：当两个或多个控制流以彼此都不可以继续执行的方式阻止对方时，就会发生死锁。特别是，对于一个并发执行流的循环，如果其中在循环中的每个流都已经获得了导致在循环中随后的流悬停的同步对象，则会发生死锁。</p><p><strong>总结※：锁定顺序不当或不释放锁</strong></p></li></ul><h3 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h3><ul><li><p><strong>实际用户ID</strong>：RUID是启动该进程的用户的ID，它与父进程的用户ID是相同的，除非它被改变 。</p></li><li><p><strong>有效用户ID</strong>：EUID是由内核检查权限时，使用的实际ID，因此它确定了进程的权限。  </p><blockquote><p>如果新的进程映像文件的 设置用户ID模式位 被设置，则新进程映像的EUID被设置为新进程映像文件的用户ID。</p></blockquote></li><li><p> 保存的设置用户ID：是执行时设置用户ID程序的进程映像文件的所有者ID 。  </p></li><li><p><strong>符号链接文件</strong>：创建符号链接实际上创建了一个具有独特的i-节点(i-node)的新文件。符号链接是包含了实际文件的路径名的特殊文件。</p><blockquote><p> 符号链接是一个实际的文件，但此文件仅包含一个到另一个文件的引用，该引用存储为用文本表示的路径。符号链接(symbolic link)是一个方便的解决文件共享的方案</p></blockquote></li><li><p><strong>空闲内存列表</strong>：</p></li><li><p><strong>整数回绕</strong>：</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>课内笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大三上期末</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
